using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using IronPython.Hosting;
using IronPython.Runtime;
using Microsoft.Scripting.Hosting;
using Microsoft.Scripting;
using System.IO;
using System.Diagnostics;
using CSA_Project.Models;

namespace CSA_Project.Controllers
{
    [Authorize]
    public class HomeController : Controller
    {
        private ApplicationDbContext DB = new ApplicationDbContext();
        


        public ActionResult Index()
        {
        
            var setting = DB.Settings.FirstOrDefault();
            string streamer = setting.Streamer;
            string host = setting.ServerIP;
            string src = setting.EuclidIP + ':' + setting.EuclidPort + setting.Topic;
            string model = setting.NN_Model;
            string weights = setting.NN_Weights;
            string python27 = setting.Python27;
            string video_feed = "http://"+host+":5000/video_feed";
            string args = "-a "+host+" -s "+src+" -m " + model + " -p " + weights;
            //run_cmd(python27, streamer, args);
            ViewBag.host = video_feed;
            return View();
        }

      
        public void run_cmd(string python, string py_script, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = python; //"PATH_TO_PYTHON_EXE";
            start.Arguments = py_script + " " + args;
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                process.BeginOutputReadLine();
            }
        }

        public string PatchParameter(string parameter, int serviceid)
        {
            var engine = Python.CreateEngine(); // Extract Python language engine from their grasp
            var scope = engine.CreateScope(); // Introduce Python namespace (scope)
            var d = new Dictionary<string, object>
            {
                { "serviceid", serviceid},
                { "parameter", parameter}
            }; // Add some sample parameters. Notice that there is no need in specifically setting the object type, interpreter will do that part for us in the script properly with high probability

            scope.SetVariable("params", d); // This will be the name of the dictionary in python script, initialized with previously created .NET Dictionary
            ScriptSource source = engine.CreateScriptSourceFromFile(@"C:\FinalProject\CSA_Project\CSA_Project\Python\streamer.py"); // Load the script
            object result = source.Execute(scope);
            var dr = new Dictionary<string, object>();
            dr = scope.GetVariable("params"); // To get the finally set variable 'parameter' from the python script
            return parameter;
        }
    }
}
